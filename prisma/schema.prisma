// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  password      String?
  image         String?
  role          UserRole  @default(STAFF)
  isActive      Boolean   @default(true)
  emailVerified DateTime?
  stripeCustomerId String? // Stripe customer ID for payments
  mfaEnabled    Boolean   @default(false) // MFA status
  mfaSecret    String?   // MFA secret for TOTP
  mfaBackupCodes String[] // MFA backup codes
  deletedAt     DateTime? // Soft delete timestamp
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  organization    Organization? @relation(fields: [organizationId], references: [id])
  organizationId  String?       @db.ObjectId
  sessions        Session[]
  accounts        Account[]
  activities      Activity[]
  assignedChats   ChatMessage[]
  createdOrders   Order[] @relation("OrderCreatedBy")
  updatedOrders   Order[] @relation("OrderUpdatedBy")
  createdProducts Product[] @relation("ProductCreatedBy")
  updatedProducts Product[] @relation("ProductUpdatedBy")
  preferences     UserPreference?
  searchHistory   SearchHistory[]
  assignedConversations CustomerConversation[]
  createdPurchaseOrders PurchaseOrder[] @relation("PurchaseOrderCreatedBy")
  assignedChatConversations ChatConversation[] @relation("ChatConversationAssignedTo")
  mfaMethods        UserMFA[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Activity {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String   // 'login', 'order_created', 'product_viewed', etc.
  description String
  metadata    Json?
  createdAt   DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@map("activities")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Organization & Multi-tenancy
model Organization {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  domain      String?
  logo        String?
  settings    Json?
  securitySettings Json? // Security configuration
  isActive    Boolean  @default(true)
  plan        PlanType @default(STARTER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  customers   Customer[]
  products    Product[]
  categories  Category[]
  orders      Order[]
  chats       ChatMessage[]
  campaigns   Campaign[]
  couriers    Courier[]
  warehouses  Warehouse[]
  payments    Payment[]
  expenses    Expense[]
  workflows   Workflow[]
  conversations CustomerConversation[]
  channelIntegrations ChannelIntegration[]
  socialPlatforms SocialPlatform[]
  syncConflicts SyncConflict[]
  whatsAppIntegrations WhatsAppIntegration[]
  whatsAppMessages WhatsAppMessage[]
  whatsAppCatalogs WhatsAppCatalog[]
  wooCommerceIntegrations WooCommerceIntegration[]
  bulkOperations BulkOperation[] // Added missing relation
  reviews Review[]
  supportTickets SupportTicket[]
  suppliers Supplier[]
  purchaseOrders PurchaseOrder[]
  customerSegments CustomerSegment[]
  customerOffers CustomerOffer[]
  customerSegmentCustomers CustomerSegmentCustomer[]
  customerOfferSegments CustomerOfferSegment[]
  customerOfferCustomers CustomerOfferCustomer[]
  chatConversations ChatConversation[]
  notifications Notification[]
  securityAudits SecurityAudit[]
  securityAlerts SecurityAlert[]
  smsLogs SmsLog[]
  smsTemplates SmsTemplate[]
  smsCampaigns SmsCampaign[]
  smsCampaignSegments SmsCampaignSegment[]
  voiceCommands VoiceCommand[]
  whatsAppTemplates WhatsAppTemplate[]
  shipments Shipment[]
  productEmbeddings ProductEmbedding[]
  userMFAs UserMFA[]
  emailTemplates EmailTemplate[]
  emailSubscriptions EmailSubscription[]
  emailCampaigns EmailCampaign[]

  @@map("organizations")
}

// Customer CRM
model Customer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phone       String?
  email       String?
  name        String?
  avatar      String?
  address     String?  // Customer address for shipping/billing
  tags        String[]
  source      String?
  isActive    Boolean  @default(true)
  totalSpent  Float    @default(0)
  points      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  orders         Order[]
  chatMessages   ChatMessage[]
  activities     CustomerActivity[]
  conversations  CustomerConversation[]
  paymentMethods PaymentMethod[]
  paymentIntents PaymentIntent[]
  subscriptions  Subscription[]
  invoices       Invoice[]
  socialProducts SocialProduct[]
  whatsAppMessages WhatsAppMessage[]
  reviews Review[]
  supportTickets SupportTicket[]
  customerSegmentCustomers CustomerSegmentCustomer[]
  customerOfferCustomers CustomerOfferCustomer[]
  chatConversations ChatConversation[]

  @@unique([organizationId, phone])
  @@unique([organizationId, email])
  @@map("customers")
}

model CustomerActivity {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  type       ActivityType
  description String
  metadata   Json?
  createdAt  DateTime         @default(now())

  // Relations
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @db.ObjectId

  @@map("customer_activities")
}

// Product Catalog
model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  products      Product[]
  parent        Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId      String?     @db.ObjectId
  children      Category[]  @relation("CategoryHierarchy")

  @@unique([organizationId, slug])
  @@map("categories")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  description String?
  sku         String?
  price       Float
  comparePrice Float?
  costPrice   Float? // Changed from 'cost' to 'costPrice' to match API
  stockQuantity Int    @default(0) // Changed from 'stock' to 'stockQuantity' to match API
  lowStockThreshold Int @default(0) // Changed from 'minStock' to 'lowStockThreshold' to match API
  reorderPoint Int @default(0) // Added reorder point for inventory management
  weight      Float?
  dimensions  Json?
  images      String[]
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  sortOrder   Int      @default(0)
  syncedAt    DateTime? // Added for sync tracking
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  category      Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId    String?   @db.ObjectId
  createdBy     User     @relation("ProductCreatedBy", fields: [createdById], references: [id])
  createdById   String   @db.ObjectId
  updatedBy     User?    @relation("ProductUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?  @db.ObjectId
  variants      ProductVariant[]
  orderItems    OrderItem[]
  activities    ProductActivity[]
  socialProducts SocialProduct[]
  reviews Review[]
  embeddings    ProductEmbedding[]

  @@unique([organizationId, slug])
  @@unique([organizationId, sku])
  @@map("products")
}

model ProductVariant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  sku       String?
  price     Float?
  costPrice Float? // Added costPrice to match API
  stockQuantity Int @default(0) // Changed from 'stock' to 'stockQuantity' to match API
  attributes Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId

  @@unique([productId, name])
  @@map("product_variants")
}

model ProductActivity {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  type       ProductActivityType
  quantity   Int?
  description String
  metadata   Json?
  createdAt  DateTime      @default(now())

  // Relations
  product    Product @relation(fields: [productId], references: [id])
  productId  String  @db.ObjectId

  @@map("product_activities")
}

// Order Management
model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String      @unique
  status        OrderStatus @default(DRAFT)
  totalAmount   Float     // Changed from 'total' to 'totalAmount' to match API (use totalAmount instead of total)
  subtotal      Float
  tax           Float     @default(0)
  shipping      Float     @default(0)
  discount      Float     @default(0)
  currency      String      @default("USD")
  paymentMethod String      @default("COD") // Added to match API
  paymentStatus String      @default("PENDING") // Added to match API
  paypalOrderId String?     // PayPal order ID for tracking
  paypalPaymentId String?   // PayPal payment ID for tracking
  stripePaymentIntentId String? // Stripe payment intent ID for tracking
  notes         String?
  metadata      Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String      @db.ObjectId
  customer      Customer @relation(fields: [customerId], references: [id])
  customerId    String      @db.ObjectId
  createdBy     User     @relation("OrderCreatedBy", fields: [createdById], references: [id])
  createdById   String   @db.ObjectId
  updatedBy     User?    @relation("OrderUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?  @db.ObjectId
  items         OrderItem[]
  payments      Payment[]
  shipments     Shipment[]
  activities    OrderActivity[]
  paymentIntents PaymentIntent[]
  whatsAppMessages WhatsAppMessage[]
  reviews Review[]
  supportTickets SupportTicket[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  price     Float
  total     Float
  metadata  Json?

  // Relations
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId

  @@map("order_items")
}

model OrderActivity {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  type       OrderActivityType
  description String
  metadata   Json?
  createdAt  DateTime      @default(now())

  // Relations
  order      Order @relation(fields: [orderId], references: [id])
  orderId    String @db.ObjectId

  @@map("order_activities")
}

// Payment System
model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  currency      String        @default("USD")
  method        String        // Changed from PaymentMethod enum to String to match API usage
  status        PaymentStatus @default(PENDING)
  gateway       String?
  gatewayId     String?
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String      @db.ObjectId
  order         Order?       @relation(fields: [orderId], references: [id])
  orderId       String?      @db.ObjectId

  @@map("payments")
}

// Shipping & Delivery
model Courier {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String
  apiKey      String?
  apiSecret   String?
  isActive    Boolean  @default(true)
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  shipments     Shipment[]

  @@unique([organizationId, code])
  @@map("couriers")
}

model Shipment {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  trackingNumber String?
  status        ShipmentStatus @default(PENDING)
  shippedAt     DateTime?
  deliveredAt   DateTime?
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       String   @db.ObjectId
  courier       Courier? @relation(fields: [courierId], references: [id])
  courierId     String?  @db.ObjectId

  @@map("shipments")
}

// Warehouse Management
model Warehouse {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String?
  isActive    Boolean  @default(true)
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("warehouses")
}

// Chat & Communication
model ChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  type      MessageType @default(TEXT)
  direction MessageDirection
  status    MessageStatus @default(SENT)
  metadata  Json?
  createdAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  customer       Customer @relation(fields: [customerId], references: [id])
  customerId     String   @db.ObjectId
  assignedTo     User?    @relation(fields: [assignedToId], references: [id])
  conversation   ChatConversation? @relation(fields: [conversationId], references: [id])
  conversationId String?   @db.ObjectId
  assignedToId   String?  @db.ObjectId

  @@map("chat_messages")
}

// Marketing & Campaigns
model Campaign {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        CampaignType
  status      CampaignStatus @default(DRAFT)
  content     String?
  settings    Json?
  sentAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("campaigns")
}

// Financial Management
model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  description String
  category    String?
  date        DateTime
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("expenses")
}

// User Preferences & Settings
model UserPreference {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  themeConfig String?  // JSON string for theme configuration
  language    String   @default("en")
  timezone    String   @default("UTC")
  notifications Json?  // Notification preferences
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId @unique

  @@map("user_preferences")
}

// Search History
model SearchHistory {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  query        String
  filters      Json?
  resultsCount Int?
  searchType   String?  // 'products', 'customers', 'orders', 'global'
  createdAt    DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@map("search_history")
}

// Workflow Engine
model Workflow {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  type           String   // 'order', 'inventory', 'customer', 'custom'
  isActive       Boolean  @default(true)
  config         Json?    // Workflow configuration
  nodes          Json?    // Workflow nodes data
  connections    Json?    // Workflow connections data
  triggers       Json?    // Workflow triggers data
  version        Int      @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  workflowNodes  WorkflowNode[]
  workflowConnections WorkflowConnection[]
  executions     WorkflowExecution[]

  @@map("workflows")
}

model WorkflowNode {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  type     String   // 'trigger', 'action', 'condition', 'delay', 'webhook', 'email', 'sms'
  name     String
  config   Json?    // Node-specific configuration
  position Json?    // UI position {x, y}

  // Relations
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId String   @db.ObjectId

  @@map("workflow_nodes")
}

model WorkflowConnection {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  sourceNodeId String @db.ObjectId
  targetNodeId String @db.ObjectId
  condition  Json?    // Connection condition

  // Relations
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId String   @db.ObjectId

  @@map("workflow_connections")
}

model WorkflowExecution {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  status        String   // 'running', 'completed', 'failed', 'paused'
  input         Json?    // Input data
  output        Json?    // Output data
  data          Json?    // Execution data
  currentNodeId String?  // Current executing node
  startedAt     DateTime @default(now())
  completedAt   DateTime?

  // Relations
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId String   @db.ObjectId
  logs       WorkflowLog[]

  @@map("workflow_executions")
}

model WorkflowLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  level     String   // 'info', 'warning', 'error'
  message   String
  data      Json?
  timestamp DateTime @default(now())

  // Relations
  execution   WorkflowExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  executionId String             @db.ObjectId

  @@map("workflow_logs")
}

model WorkflowTemplate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  category    String?
  config      Json?    // Template configuration
  definition  Json?    // Template definition
  tags        Json?    // Template tags
  usageCount  Int      @default(0)
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("workflow_templates")
}

// Omnichannel Customer Support
model CustomerConversation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  channel     String   // 'whatsapp', 'facebook', 'instagram', 'website', 'email', 'sms'
  status      String   // 'active', 'resolved', 'pending'
  priority    String   // 'low', 'medium', 'high', 'urgent'
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  customer       Customer   @relation(fields: [customerId], references: [id])
  customerId     String     @db.ObjectId
  assignedAgent  User?      @relation(fields: [assignedAgentId], references: [id])
  assignedAgentId String?   @db.ObjectId
  messages       ChannelMessage[]

  @@map("customer_conversations")
}

model ChannelMessage {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  channel        String   // 'whatsapp', 'facebook', 'instagram', 'website', 'email', 'sms'
  message        String
  timestamp      DateTime @default(now())
  isIncoming     Boolean  @default(true)
  status         String   // 'sent', 'delivered', 'read', 'failed'
  metadata       Json?

  // Relations
  conversation   CustomerConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String               @db.ObjectId

  @@map("channel_messages")
}

model ChannelIntegration {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  channel     String   // 'whatsapp', 'facebook', 'instagram', 'email', 'sms'
  isActive    Boolean  @default(true)
  config      Json?    // Integration configuration
  lastSync    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@unique([organizationId, channel])
  @@map("channel_integrations")
}

// Advanced Payment Processing
model PaymentMethod {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  type                  String   // 'card', 'bank_account', 'paypal', 'crypto'
  last4                 String?
  brand                 String?
  expiryMonth           Int?
  expiryYear            Int?
  isDefault             Boolean  @default(false)
  stripePaymentMethodId String?  // Stripe payment method ID
  metadata              Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String   @db.ObjectId
  intents    PaymentIntent[]

  @@map("payment_methods")
}

model PaymentIntent {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  stripePaymentIntentId String?  @unique
  amount                Float
  currency              String   @default("USD")
  status                String   // 'pending', 'processing', 'succeeded', 'failed', 'canceled'
  metadata              Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  customer      Customer      @relation(fields: [customerId], references: [id])
  customerId    String        @db.ObjectId
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?     @db.ObjectId
  order         Order?        @relation(fields: [orderId], references: [id])
  orderId       String?       @db.ObjectId
  refunds       Refund[]

  @@map("payment_intents")
}

model Subscription {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  stripeSubscriptionId String? @unique
  planId              String?  // Plan identifier for subscription management
  status              String   // 'active', 'canceled', 'past_due', 'unpaid'
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean  @default(false)
  metadata            Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @db.ObjectId
  invoices   Invoice[]

  @@map("subscriptions")
}

model Invoice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  currency    String   @default("USD")
  status      String   // 'draft', 'open', 'paid', 'void', 'uncollectible'
  dueDate     DateTime?
  stripeInvoiceId String? // Stripe invoice ID
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  customer      Customer     @relation(fields: [customerId], references: [id])
  customerId    String       @db.ObjectId
  subscription  Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?     @db.ObjectId

  @@map("invoices")
}

// Refund model for payment processing
model Refund {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  currency    String   @default("USD")
  reason      String   // 'requested_by_customer', 'fraudulent', 'duplicate', 'other'
  status      String   // 'pending', 'succeeded', 'failed', 'canceled'
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  paymentIntent   PaymentIntent @relation(fields: [paymentIntentId], references: [id])
  paymentIntentId String        @db.ObjectId

  @@map("refunds")
}

// Social Commerce Integration
model SocialPlatform {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   // 'facebook', 'instagram', 'tiktok', 'pinterest', 'twitter'
  isActive    Boolean  @default(true)
  config      Json?    // Platform configuration
  lastSync    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  socialProducts SocialProduct[]
  socialPosts    SocialPost[]

  @@unique([organizationId, name])
  @@map("social_platforms")
}

model SocialProduct {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  platformProductId String   // External platform product ID
  status            String   // 'active', 'inactive', 'syncing', 'error'
  metadata          Json?
  lastSync          DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  platform   SocialPlatform @relation(fields: [platformId], references: [id], onDelete: Cascade)
  platformId String         @db.ObjectId
  product    Product        @relation(fields: [productId], references: [id])
  productId  String         @db.ObjectId
  customer   Customer?      @relation(fields: [customerId], references: [id])
  customerId String?        @db.ObjectId

  @@unique([productId, platformId])
  @@map("social_products")
}

model SocialPost {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String   // 'product', 'story', 'reel', 'post'
  content     String
  mediaUrls   String[]
  productIds  String[]
  scheduledAt DateTime?
  publishedAt DateTime?
  status      String   // 'draft', 'scheduled', 'published', 'failed'
  engagement  Json?    // {likes, comments, shares, clicks}
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  platform   SocialPlatform @relation(fields: [platformId], references: [id], onDelete: Cascade)
  platformId String         @db.ObjectId

  @@map("social_posts")
}

// Bulk Operations
model BulkOperation {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  type             String   // 'import', 'export'
  entity           String   // 'products', 'customers', 'orders', 'inventory'
  status           String   // 'pending', 'processing', 'completed', 'failed'
  totalRecords     Int      @default(0)
  processedRecords Int      @default(0)
  successRecords   Int      @default(0)
  failedRecords    Int      @default(0)
  fileUrl          String?
  errors           String[]
  metadata         Json?
  createdAt        DateTime @default(now())
  completedAt      DateTime?

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("bulk_operations")
}

// Sync and Integration Models
model SyncConflict {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  entityType  String
  entityId    String
  conflicts   Json
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  resolvedAt  DateTime?
  resolvedBy  String?  @db.ObjectId

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("sync_conflicts")
}

model WhatsAppIntegration {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumberId String   @unique
  accessToken   String
  webhookSecret String?
  isActive      Boolean  @default(true)
  settings      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("whatsapp_integrations")
}

model WhatsAppMessage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  from        String
  to          String
  type        String
  content     String
  timestamp   DateTime
  status      String   @default("sent")
  messageId   String?  // WhatsApp message ID
  statusTimestamp DateTime? // When status was updated
  metadata    Json?
  syncedAt    DateTime?
  syncSource  String?

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  customer      Customer?   @relation(fields: [customerId], references: [id])
  customerId    String?     @db.ObjectId
  order         Order?      @relation(fields: [orderId], references: [id])
  orderId       String?     @db.ObjectId

  @@map("whatsapp_messages")
}

model WhatsAppCatalog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  products    Json
  catalogId   String?  // WhatsApp catalog ID
  isActive    Boolean  @default(true)
  lastUpdated DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@unique([organizationId])
  @@map("whatsapp_catalogs")
}

model WooCommerceIntegration {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  siteUrl       String
  consumerKey   String
  consumerSecret String
  apiVersion    String   @default("wc/v3")
  isActive      Boolean  @default(true)
  settings      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@unique([organizationId])
  @@map("woocommerce_integrations")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  STAFF
  PACKING
}

enum PlanType {
  STARTER
  PRO
  ENTERPRISE
  LIFETIME
}

enum ActivityType {
  ORDER_CREATED
  ORDER_UPDATED
  ORDER_CANCELLED
  PAYMENT_RECEIVED
  SHIPMENT_CREATED
  SHIPMENT_DELIVERED
  CUSTOMER_CREATED
  CUSTOMER_UPDATED
}

enum ProductActivityType {
  STOCK_ADDED
  STOCK_REDUCED
  PRICE_UPDATED
  STATUS_CHANGED
}

enum OrderStatus {
  DRAFT
  PENDING
  CONFIRMED
  PACKED
  OUT_FOR_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
  RETURNED
}

enum OrderActivityType {
  CREATED
  CONFIRMED
  PACKED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentMethodType {
  CASH_ON_DELIVERY
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
  PAYPAL
  STRIPE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum ShipmentStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  LOCATION
  CONTACT
  TEMPLATE
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum CampaignType {
  EMAIL
  SMS
  WHATSAPP
  PUSH_NOTIFICATION
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
} 

// Review System
model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  rating     Int      // 1-5 stars
  title      String?
  content    String
  isVerified Boolean  @default(false)
  helpful    Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  product       Product?    @relation(fields: [productId], references: [id])
  productId     String?     @db.ObjectId
  customer      Customer?   @relation(fields: [customerId], references: [id])
  customerId    String?     @db.ObjectId
  order        Order?       @relation(fields: [orderId], references: [id])
  orderId      String?      @db.ObjectId

  @@map("reviews")
}

// Support Ticket System
model SupportTicket {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  priority    String   @default("medium") // 'low', 'medium', 'high', 'urgent'
  status      String   @default("open")   // 'open', 'in_progress', 'resolved', 'closed'
  category    String?
  assignedTo  String?  @db.ObjectId
  phone       String?  // Phone number for support contact
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  customer      Customer?   @relation(fields: [customerId], references: [id])
  customerId    String?     @db.ObjectId
  order         Order?      @relation(fields: [orderId], references: [id])
  orderId       String?     @db.ObjectId

  @@map("support_tickets")
}

// Supplier Management
model Supplier {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String
  email       String?
  phone       String?
  address     String?
  contactPerson String?
  rating      Float?   // 1-5 rating
  isActive    Boolean  @default(true)
  paymentTerms String?
  leadTime    Int?     // Days
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  purchaseOrders PurchaseOrder[]

  @@unique([organizationId, code])
  @@map("suppliers")
}

// Purchase Order System
model PurchaseOrder {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  poNumber   String   @unique
  status     String   @default("DRAFT") // 'DRAFT', 'SENT', 'CONFIRMED', 'RECEIVED', 'CANCELLED'
  totalAmount Float
  currency   String   @default("USD")
  expectedDelivery DateTime?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  supplier      Supplier    @relation(fields: [supplierId], references: [id])
  supplierId    String      @db.ObjectId
  createdBy     User        @relation("PurchaseOrderCreatedBy", fields: [createdById], references: [id])
  createdById   String      @db.ObjectId
  items         PurchaseOrderItem[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  unitPrice Float
  total     Float
  productId String   @db.ObjectId
  notes     String?

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId String      @db.ObjectId

  @@map("purchase_order_items")
}

// Customer Segmentation
model CustomerSegment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  criteria    Json     // Segmentation criteria
  customerCount Int    @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  customerSegmentCustomers CustomerSegmentCustomer[]
  customerOfferSegments CustomerOfferSegment[]
  smsCampaignSegments SmsCampaignSegment[]

  @@unique([organizationId, name])
  @@map("customer_segments")
}

// Customer Segment Junction
model CustomerSegmentCustomer {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  customerSegment CustomerSegment @relation(fields: [customerSegmentId], references: [id], onDelete: Cascade)
  customerSegmentId String @db.ObjectId
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId      String   @db.ObjectId
  assignedAt      DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@unique([customerSegmentId, customerId])
  @@map("customer_segment_customers")
}

// Customer Offers
model CustomerOffer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  discountType String  // 'percentage', 'fixed', 'free_shipping'
  discountValue Float
  minOrderValue Float?
  maxDiscount  Float?
  validFrom    DateTime
  validUntil   DateTime
  usageLimit   Int?
  usageCount   Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  customerOfferSegments CustomerOfferSegment[]
  customerOfferCustomers CustomerOfferCustomer[]

  @@map("customer_offers")
}

// Customer Offer Segment Junction
model CustomerOfferSegment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  customerOffer CustomerOffer @relation(fields: [customerOfferId], references: [id], onDelete: Cascade)
  customerOfferId String @db.ObjectId
  customerSegment CustomerSegment @relation(fields: [customerSegmentId], references: [id], onDelete: Cascade)
  customerSegmentId String @db.ObjectId
  assignedAt    DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@unique([customerOfferId, customerSegmentId])
  @@map("customer_offer_segments")
}

// Customer Offer Customer Junction
model CustomerOfferCustomer {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  customerOffer CustomerOffer @relation(fields: [customerOfferId], references: [id], onDelete: Cascade)
  customerOfferId String @db.ObjectId
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId    String   @db.ObjectId
  assignedAt    DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@unique([customerOfferId, customerId])
  @@map("customer_offer_customers")
}

// Chat Conversation System
model ChatConversation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  status      String   @default("active") // 'active', 'resolved', 'archived'
  priority    String   @default("medium") // 'low', 'medium', 'high', 'urgent'
  assignedTo  String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  customer      Customer    @relation(fields: [customerId], references: [id])
  customerId    String      @db.ObjectId
  messages      ChatMessage[]
  assignedAgent User?       @relation("ChatConversationAssignedTo", fields: [assignedTo], references: [id])

  @@map("chat_conversations")
}

// Notification System
model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String   // 'email', 'sms', 'push', 'in_app'
  title       String
  message     String
  status      String   @default("pending") // 'pending', 'sent', 'delivered', 'read', 'failed'
  recipient   String   @db.ObjectId
  metadata    Json?
  sentAt      DateTime?
  readAt      DateTime?
  createdAt   DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("notifications")
}

// Security Models
model SecurityAudit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  action      String   // 'login', 'logout', 'permission_change', etc.
  ipAddress   String?
  userAgent   String?
  metadata    Json?
  createdAt   DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("security_audits")
}

model SecurityAlert {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String   // 'suspicious_login', 'permission_violation', etc.
  severity    String   // 'low', 'medium', 'high', 'critical'
  message     String
  metadata    Json?
  isResolved  Boolean  @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?  @db.ObjectId
  createdAt   DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("security_alerts")
}

// SMS Models
model SmsLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phone       String
  message     String
  status      String   // 'pending', 'sent', 'delivered', 'failed'
  provider    String?
  messageId   String?
  metadata    Json?
  sentAt      DateTime?
  deliveredAt DateTime?
  createdAt   DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("sms_logs")
}

model SmsTemplate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  content     String
  variables   String[] // Template variables like {{name}}, {{order_id}}
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  campaigns SmsCampaign[]

  @@map("sms_templates")
}

model SmsCampaign {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  templateId  String   @db.ObjectId
  status      String   // 'draft', 'scheduled', 'active', 'paused', 'completed'
  scheduledAt DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  template      SmsTemplate @relation(fields: [templateId], references: [id])
  segments      SmsCampaignSegment[]

  @@map("sms_campaigns")
}

model SmsCampaignSegment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  smsCampaign   SmsCampaign @relation(fields: [smsCampaignId], references: [id], onDelete: Cascade)
  smsCampaignId String      @db.ObjectId
  customerSegment CustomerSegment @relation(fields: [customerSegmentId], references: [id], onDelete: Cascade)
  customerSegmentId String  @db.ObjectId
  assignedAt    DateTime    @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@unique([smsCampaignId, customerSegmentId])
  @@map("sms_campaign_segments")
}

// Voice Models
model VoiceCommand {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  command     String
  action      String
  userId      String?  @db.ObjectId // User who issued the command
  intent      String?  // Intent classification
  entities    Json?    // Extracted entities
  confidence  Float?   // Confidence score
  response    String?  // Response text
  timestamp   DateTime @default(now()) // When command was processed
  processed   Boolean  @default(false) // Whether command was processed
  metadata    Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("voice_commands")
}

// AI and ML Models
model ProductEmbedding {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  productId     String   @db.ObjectId
  embedding     Json     // Vector embedding data
  imageUrl      String?  // URL of the image used for embedding
  modelVersion  String   @default("v1") // AI model version used
  confidence    Float    @default(0.0) // Confidence score
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  product       Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, modelVersion])
  @@map("product_embeddings")
}

model UserMFA {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  method       String   // 'totp', 'sms', 'email'
  secret       String?  // For TOTP
  phone        String?  // For SMS
  email        String?  // For email
  isActive     Boolean  @default(true)
  lastUsed     DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, method])
  @@map("user_mfa")
}

// WhatsApp Models
model WhatsAppTemplate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  content     String
  language    String   @default("en")
  category    String?
  components  Json?    // Template components
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("whatsapp_templates")
}

// Email Models
model EmailTemplate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  subject     String
  htmlContent String
  textContent String
  variables   String[] // Template variables
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  campaigns     EmailCampaign[]

  @@map("email_templates")
}

model EmailSubscription {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  listId       String   // Mailing list identifier
  isActive     Boolean  @default(true)
  customFields Json?    // Custom fields for personalization
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@unique([email, listId])
  @@map("email_subscriptions")
}

model EmailCampaign {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  subject        String
  htmlContent    String
  textContent    String?
  status         String   @default("draft") // draft, scheduled, sending, sent, cancelled
  organizationId String   @db.ObjectId
  templateId     String   @db.ObjectId
  sentAt         DateTime?
  recipientCount Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  template     EmailTemplate @relation(fields: [templateId], references: [id])

  @@map("email_campaigns")
}