// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  password      String?
  image         String?
  role          UserRole  @default(STAFF)
  isActive      Boolean   @default(true)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  organization    Organization? @relation(fields: [organizationId], references: [id])
  organizationId  String?       @db.ObjectId
  sessions        Session[]
  accounts        Account[]
  activities      Activity[]
  assignedChats   ChatMessage[]
  createdOrders   Order[]
  updatedOrders   Order[]
  createdProducts Product[]
  updatedProducts Product[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Organization & Multi-tenancy
model Organization {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  domain      String?
  logo        String?
  settings    Json?
  isActive    Boolean  @default(true)
  plan        PlanType @default(STARTER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  customers   Customer[]
  products    Product[]
  categories  Category[]
  orders      Order[]
  chats       ChatMessage[]
  campaigns   Campaign[]
  couriers    Courier[]
  warehouses  Warehouse[]
  payments    Payment[]
  expenses    Expense[]

  @@map("organizations")
}

// Customer CRM
model Customer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phone       String?
  email       String?
  name        String?
  avatar      String?
  tags        String[]
  source      String?
  isActive    Boolean  @default(true)
  totalSpent  Decimal  @default(0)
  points      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @db.ObjectId
  orders         Order[]
  chatMessages   ChatMessage[]
  activities     CustomerActivity[]

  @@unique([organizationId, phone])
  @@unique([organizationId, email])
  @@map("customers")
}

model CustomerActivity {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  type       ActivityType
  description String
  metadata   Json?
  createdAt  DateTime         @default(now())

  // Relations
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @db.ObjectId

  @@map("customer_activities")
}

// Product Catalog
model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  products      Product[]
  parent        Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId      String?     @db.ObjectId
  children      Category[]  @relation("CategoryHierarchy")

  @@unique([organizationId, slug])
  @@map("categories")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  description String?
  sku         String?
  price       Decimal
  comparePrice Decimal?
  cost        Decimal?
  stock       Int      @default(0)
  minStock    Int      @default(0)
  weight      Decimal?
  dimensions  Json?
  images      String[]
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    String?   @db.ObjectId
  createdBy     User     @relation("ProductCreatedBy", fields: [createdById], references: [id])
  createdById   String   @db.ObjectId
  updatedBy     User?    @relation("ProductUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?  @db.ObjectId
  variants      ProductVariant[]
  orderItems    OrderItem[]
  activities    ProductActivity[]

  @@unique([organizationId, slug])
  @@unique([organizationId, sku])
  @@map("products")
}

model ProductVariant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  sku       String?
  price     Decimal?
  stock     Int      @default(0)
  attributes Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  @@unique([productId, name])
  @@map("product_variants")
}

model ProductActivity {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  type       ProductActivityType
  quantity   Int?
  description String
  metadata   Json?
  createdAt  DateTime      @default(now())

  // Relations
  product    Product @relation(fields: [productId], references: [id])
  productId  String  @db.ObjectId

  @@map("product_activities")
}

// Order Management
model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String      @unique
  status        OrderStatus @default(DRAFT)
  total         Decimal
  subtotal      Decimal
  tax           Decimal     @default(0)
  shipping      Decimal     @default(0)
  discount      Decimal     @default(0)
  currency      String      @default("USD")
  notes         String?
  metadata      Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String      @db.ObjectId
  customer      Customer @relation(fields: [customerId], references: [id])
  customerId    String      @db.ObjectId
  createdBy     User     @relation("OrderCreatedBy", fields: [createdById], references: [id])
  createdById   String   @db.ObjectId
  updatedBy     User?    @relation("OrderUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String?  @db.ObjectId
  items         OrderItem[]
  payments      Payment[]
  shipments     Shipment[]
  activities    OrderActivity[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  price     Decimal
  total     Decimal
  metadata  Json?

  // Relations
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  @@map("order_items")
}

model OrderActivity {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  type       OrderActivityType
  description String
  metadata   Json?
  createdAt  DateTime      @default(now())

  // Relations
  order      Order @relation(fields: [orderId], references: [id])
  orderId    String @db.ObjectId

  @@map("order_activities")
}

// Payment System
model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Decimal
  currency      String        @default("USD")
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  gateway       String?
  gatewayId     String?
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String      @db.ObjectId
  order         Order?       @relation(fields: [orderId], references: [id])
  orderId       String?      @db.ObjectId

  @@map("payments")
}

// Shipping & Delivery
model Courier {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  code        String
  apiKey      String?
  apiSecret   String?
  isActive    Boolean  @default(true)
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  shipments     Shipment[]

  @@unique([organizationId, code])
  @@map("couriers")
}

model Shipment {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  trackingNumber String?
  status        ShipmentStatus @default(PENDING)
  shippedAt     DateTime?
  deliveredAt   DateTime?
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       String   @db.ObjectId
  courier       Courier? @relation(fields: [courierId], references: [id])
  courierId     String?  @db.ObjectId

  @@map("shipments")
}

// Warehouse Management
model Warehouse {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String?
  isActive    Boolean  @default(true)
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("warehouses")
}

// Chat & Communication
model ChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  type      MessageType @default(TEXT)
  direction MessageDirection
  status    MessageStatus @default(SENT)
  metadata  Json?
  createdAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId
  customer       Customer @relation(fields: [customerId], references: [id])
  customerId     String   @db.ObjectId
  assignedTo     User?    @relation(fields: [assignedToId], references: [id])
  assignedToId   String?  @db.ObjectId

  @@map("chat_messages")
}

// Marketing & Campaigns
model Campaign {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        CampaignType
  status      CampaignStatus @default(DRAFT)
  content     String?
  settings    Json?
  sentAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("campaigns")
}

// Financial Management
model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Decimal
  description String
  category    String?
  date        DateTime
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String     @db.ObjectId

  @@map("expenses")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  STAFF
  PACKING
}

enum PlanType {
  STARTER
  PRO
  ENTERPRISE
  LIFETIME
}

enum ActivityType {
  ORDER_CREATED
  ORDER_UPDATED
  ORDER_CANCELLED
  PAYMENT_RECEIVED
  SHIPMENT_CREATED
  SHIPMENT_DELIVERED
  CUSTOMER_CREATED
  CUSTOMER_UPDATED
}

enum ProductActivityType {
  STOCK_ADDED
  STOCK_REDUCED
  PRICE_UPDATED
  STATUS_CHANGED
}

enum OrderStatus {
  DRAFT
  CONFIRMED
  PACKED
  OUT_FOR_DELIVERY
  DELIVERED
  COMPLETED
  CANCELLED
  RETURNED
}

enum OrderActivityType {
  CREATED
  CONFIRMED
  PACKED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  DIGITAL_WALLET
  PAYPAL
  STRIPE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum ShipmentStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  LOCATION
  CONTACT
  TEMPLATE
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum CampaignType {
  EMAIL
  SMS
  WHATSAPP
  PUSH_NOTIFICATION
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
} 