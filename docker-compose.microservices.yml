version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - user-service
      - product-service
      - order-service
      - payment-service
      - notification-service
    networks:
      - smartstore-network

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${USER_DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - user-db
      - redis
    networks:
      - smartstore-network
    deploy:
      replicas: 2

  # Product Service
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${PRODUCT_DATABASE_URL}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
    depends_on:
      - product-db
      - elasticsearch
      - redis
    networks:
      - smartstore-network
    deploy:
      replicas: 3

  # Order Service
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${ORDER_DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - order-db
      - redis
      - rabbitmq
    networks:
      - smartstore-network
    deploy:
      replicas: 2

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${PAYMENT_DATABASE_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - payment-db
      - redis
    networks:
      - smartstore-network
    deploy:
      replicas: 2

  # Inventory Service
  inventory-service:
    build:
      context: ./services/inventory-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${INVENTORY_DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - inventory-db
      - redis
      - rabbitmq
    networks:
      - smartstore-network
    deploy:
      replicas: 2

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${NOTIFICATION_DATABASE_URL}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - notification-db
      - rabbitmq
    networks:
      - smartstore-network

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${ANALYTICS_DATABASE_URL}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
    depends_on:
      - analytics-db
      - elasticsearch
      - redis
    networks:
      - smartstore-network

  # AI/ML Service
  ai-ml-service:
    build:
      context: ./services/ai-ml-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${AI_DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TENSORFLOW_BACKEND=cpu
      - REDIS_URL=redis://redis:6379
    depends_on:
      - ai-db
      - redis
    networks:
      - smartstore-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Search Service
  search-service:
    build:
      context: ./services/search-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
    depends_on:
      - elasticsearch
      - redis
    networks:
      - smartstore-network

  # File Storage Service
  file-service:
    build:
      context: ./services/file-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_REGION=${AWS_REGION}
    networks:
      - smartstore-network

  # Blockchain Service
  blockchain-service:
    build:
      context: ./services/blockchain-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${BLOCKCHAIN_DATABASE_URL}
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - BLOCKCHAIN_PRIVATE_KEY=${BLOCKCHAIN_PRIVATE_KEY}
    depends_on:
      - blockchain-db
    networks:
      - smartstore-network

  # IoT Service
  iot-service:
    build:
      context: ./services/iot-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${IOT_DATABASE_URL}
      - MQTT_BROKER_URL=${MQTT_BROKER_URL}
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - iot-db
      - redis
      - rabbitmq
      - mqtt-broker
    networks:
      - smartstore-network

  # Databases
  user-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=users
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - user-data:/var/lib/postgresql/data
    networks:
      - smartstore-network

  product-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=products
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - product-data:/var/lib/postgresql/data
    networks:
      - smartstore-network

  order-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=orders
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - order-data:/var/lib/postgresql/data
    networks:
      - smartstore-network

  payment-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=payments
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - payment-data:/var/lib/postgresql/data
    networks:
      - smartstore-network

  inventory-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=inventory
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - inventory-data:/var/lib/postgresql/data
    networks:
      - smartstore-network

  notification-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=notifications
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - notification-data:/var/lib/postgresql/data
    networks:
      - smartstore-network

  analytics-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=analytics
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - analytics-data:/var/lib/postgresql/data
    networks:
      - smartstore-network

  ai-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=aiml
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ai-data:/var/lib/postgresql/data
    networks:
      - smartstore-network

  blockchain-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=blockchain
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - blockchain-data:/var/lib/postgresql/data
    networks:
      - smartstore-network

  iot-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=iot
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - iot-data:/var/lib/postgresql/data
    networks:
      - smartstore-network

  # Infrastructure Services
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - smartstore-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "15672:15672" # Management UI
    networks:
      - smartstore-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - smartstore-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - smartstore-network

  mqtt-broker:
    image: eclipse-mosquitto:2
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mqtt-data:/mosquitto/data
      - mqtt-logs:/mosquitto/log
    networks:
      - smartstore-network

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - smartstore-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - smartstore-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - smartstore-network

  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    depends_on:
      - api-gateway
    networks:
      - smartstore-network

volumes:
  user-data:
  product-data:
  order-data:
  payment-data:
  inventory-data:
  notification-data:
  analytics-data:
  ai-data:
  blockchain-data:
  iot-data:
  redis-data:
  rabbitmq-data:
  elasticsearch-data:
  mqtt-data:
  mqtt-logs:
  prometheus-data:
  grafana-data:

networks:
  smartstore-network:
    driver: bridge
