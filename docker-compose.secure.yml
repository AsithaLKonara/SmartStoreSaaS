version: '3.8'

services:
  mongodb:
    image: mongo:7.0
    container_name: smartstore-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: smartstore
    ports:
      - "127.0.0.1:27017:27017"  # Bind to localhost only
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - smartstore-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/run
    ulimits:
      nproc: 65536
      nofile:
        soft: 20000
        hard: 40000
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7.2-alpine
    container_name: smartstore-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_data:/data
    networks:
      - smartstore-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
    ulimits:
      nproc: 65536
      nofile:
        soft: 20000
        hard: 40000
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Remove mongo-express for production - security risk
  # mongo-express:
  #   image: mongo-express:1.0.0
  #   container_name: smartstore-mongo-express
  #   restart: unless-stopped
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME}
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
  #     ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/
  #     ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
  #     ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
  #   ports:
  #     - "127.0.0.1:8081:8081"  # Bind to localhost only
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #   networks:
  #     - smartstore-network
  #   security_opt:
  #     - no-new-privileges:true

  app:
    build: 
      context: .
      dockerfile: Dockerfile.secure
    container_name: smartstore-app
    restart: unless-stopped
    environment:
      - DATABASE_URL=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/smartstore?authSource=smartstore
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NODE_ENV=${NODE_ENV}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - MFA_ENCRYPTION_KEY=${MFA_ENCRYPTION_KEY}
    ports:
      - "127.0.0.1:3000:3000"  # Bind to localhost only
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartstore-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/cache
    ulimits:
      nproc: 65536
      nofile:
        soft: 20000
        hard: 40000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # API Gateway with enhanced security
  api-gateway:
    build: 
      context: ./services/api-gateway
      dockerfile: Dockerfile.secure
    container_name: smartstore-api-gateway
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - USER_SERVICE_URL=http://user-service:3002
      - PRODUCT_SERVICE_URL=http://product-service:3003
      - ORDER_SERVICE_URL=http://order-service:3004
      - PAYMENT_SERVICE_URL=http://payment-service:3005
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "127.0.0.1:3001:3001"  # Bind to localhost only
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - smartstore-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
      - /var/cache
    ulimits:
      nproc: 65536
      nofile:
        soft: 20000
        hard: 40000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # User Service
  user-service:
    build: 
      context: ./services/user-service
      dockerfile: Dockerfile.secure
    container_name: smartstore-user-service
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3002
      - DATABASE_URL=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/smartstore?authSource=smartstore
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartstore-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
    ulimits:
      nproc: 65536
      nofile:
        soft: 20000
        hard: 40000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Product Service
  product-service:
    build: 
      context: ./services/product-service
      dockerfile: Dockerfile.secure
    container_name: smartstore-product-service
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3003
      - DATABASE_URL=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/smartstore?authSource=smartstore
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartstore-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
    ulimits:
      nproc: 65536
      nofile:
        soft: 20000
        hard: 40000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Order Service
  order-service:
    build: 
      context: ./services/order-service
      dockerfile: Dockerfile.secure
    container_name: smartstore-order-service
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3004
      - DATABASE_URL=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/smartstore?authSource=smartstore
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartstore-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
    ulimits:
      nproc: 65536
      nofile:
        soft: 20000
        hard: 40000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Payment Service
  payment-service:
    build: 
      context: ./services/payment-service
      dockerfile: Dockerfile.secure
    container_name: smartstore-payment-service
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3005
      - DATABASE_URL=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/smartstore?authSource=smartstore
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartstore-network
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp
    ulimits:
      nproc: 65536
      nofile:
        soft: 20000
        hard: 40000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mongodb
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

networks:
  smartstore-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: smartstore-br0 